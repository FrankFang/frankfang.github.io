<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方应杭的个人网站 on 方应杭的个人网站</title>
    <link>http://fangyinghang.com/</link>
    <description>Recent content in 方应杭的个人网站 on 方应杭的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 08 Nov 2018 04:04:02 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>工作经历</title>
      <link>http://fangyinghang.com/my/resume/</link>
      <pubDate>Thu, 08 Nov 2018 04:04:02 +0800</pubDate>
      
      <guid>http://fangyinghang.com/my/resume/</guid>
      <description>&lt;p&gt;1 2 3&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的文章</title>
      <link>http://fangyinghang.com/my/articles/</link>
      <pubDate>Thu, 08 Nov 2018 04:04:02 +0800</pubDate>
      
      <guid>http://fangyinghang.com/my/articles/</guid>
      <description>&lt;p&gt;1 2 3&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的课程</title>
      <link>http://fangyinghang.com/my/courses/</link>
      <pubDate>Thu, 08 Nov 2018 04:04:02 +0800</pubDate>
      
      <guid>http://fangyinghang.com/my/courses/</guid>
      <description>&lt;p&gt;1 2 3&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>联系方式</title>
      <link>http://fangyinghang.com/contacts/</link>
      <pubDate>Thu, 08 Nov 2018 03:43:41 +0800</pubDate>
      
      <guid>http://fangyinghang.com/contacts/</guid>
      <description>&lt;p&gt;微信扫码&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fangyinghang.com/images/me/wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;邮箱&lt;/p&gt;

&lt;p&gt;fangyinghang # foxmail.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>this 的值到底是什么？一次说清楚</title>
      <link>http://fangyinghang.com/2016/this-in-js/</link>
      <pubDate>Sun, 20 Nov 2016 13:39:30 +0800</pubDate>
      
      <guid>http://fangyinghang.com/2016/this-in-js/</guid>
      <description>

&lt;p&gt;你可能遇到过这样的 JS 面试题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {
  foo: function(){
    console.log(this)
  }
}

var bar = obj.foo
obj.foo() // 打印出的 this 是 obj
bar() // 打印出的 this 是 window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请解释最后两行函数的值为什么不一样。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;初学者关于 this 的理解一直很模糊。今天这篇文章就要一次讲清楚了。&lt;/p&gt;

&lt;p&gt;而且这个解释，你在别的地方看不到。看懂这篇文章，所有关于 this 的面试题，都是小菜。&lt;/p&gt;

&lt;h2 id=&#34;函数调用&#34;&gt;函数调用&lt;/h2&gt;

&lt;p&gt;首先需要从函数的调用开始讲起。&lt;/p&gt;

&lt;p&gt;JS（ES5）里面有三种函数调用形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func(p1, p2) 
obj.child.method(p1, p2)
func.call(context, p1, p2) // 先不讲 apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般，初学者都知道前两种形式，而且认为前两种形式「优于」第三种形式。&lt;/p&gt;

&lt;p&gt;从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func.call(context, p1, p2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他两种都是语法糖，可以等价地变为 call 形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func(p1, p2) 等价于
func.call(undefined, p1, p2)

obj.child.method(p1, p2) 等价于
obj.child.method.call(obj.child, p1, p2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请记下来。（我们称此代码为「转换代码」，方便下文引用）&lt;/p&gt;

&lt;p&gt;至此我们的函数调用只有一种形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func.call(context, p1, p2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，this 就好解释了 this，就是上面代码中的 context。就这么简单。&lt;/p&gt;

&lt;p&gt;也就是说 &lt;strong&gt;this 是你 call 一个函数时传的第一个参数&lt;/strong&gt;，
只是由于你从来不用 call 形式的函数调用，所以你一直不知道。&lt;/p&gt;

&lt;h2 id=&#34;func-p1-p2-里的-this&#34;&gt;func(p1, p2) 里的 this&lt;/h2&gt;

&lt;p&gt;先看 func(p1, p2) 中的 this 如何确定：&lt;/p&gt;

&lt;p&gt;当你写下面代码时&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function func(){
  console.log(this)
}

func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function func(){
  console.log(this)
}

func.call(undefined) // 可以简写为 func.call()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：&lt;/p&gt;

&lt;p&gt;如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）
因此上面的打印结果是 window。&lt;/p&gt;

&lt;p&gt;如果你希望这里的 this 不是 window，很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func.call(obj) // 那么里面的 this 就是 obj 对象了
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;obj-child-method-p1-p2-里的-this&#34;&gt;obj.child.method(p1, p2) 里的 this&lt;/h2&gt;

&lt;p&gt;再看 obj.child.method(p1, p2) 的 this 如何确定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {
  foo: function(){
    console.log(this)
  }
}

obj.foo() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照「转换代码」，我们将 obj.foo() 转换为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj.foo.call(obj)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，this 就是 obj。搞定。&lt;/p&gt;

&lt;p&gt;回到题目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {
  foo: function(){
    console.log(this)
  }
}

var bar = obj.foo
obj.foo() // 转换为 obj.foo.call(obj)，this 就是 obj
bar() 
// 转换为 bar.call()
// 由于没有传 context
// 所以 this 就是 undefined
// 最后浏览器给你一个默认的 this —— window 对象
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;语法&#34;&gt;[ ] 语法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function fn (){ console.log(this) }
var arr = [fn, fn2]
arr[0]() // 这里面的 this 又是什么呢？
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以把 arr[0]( ) 想象为arr.0( )，虽然后者的语法错了，但是形式与转换代码里的 obj.child.method(p1, p2) 对应上了，于是就可以愉快的转换了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr[0]() 
假想为  arr.0()
然后转换为 arr.0.call(arr)
那么里面的 this 就是 arr 了 :)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;this 就是你 call 一个函数时，传入的第一个参数。（请务必背下来「this 就是 call 的第一个参数」）
如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。&lt;/p&gt;

&lt;p&gt;以后你遇到所有跟 this 有关的笔试题，都不会有疑问了。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>