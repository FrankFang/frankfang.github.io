<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 方应杭的个人网站</title>
    <link>http://fangyinghang.com/posts/</link>
    <description>Recent content in Posts on 方应杭的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 09 Nov 2018 02:23:41 +0800</lastBuildDate>
    
	<atom:link href="http://fangyinghang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event Loop、计时器、nextTick</title>
      <link>http://fangyinghang.com/eventloop-timers-and-nexttick/</link>
      <pubDate>Fri, 09 Nov 2018 02:23:41 +0800</pubDate>
      
      <guid>http://fangyinghang.com/eventloop-timers-and-nexttick/</guid>
      <description>原文：The Node.js Event Loop, Timers, and process.nextTick() | Node.js 以下是译文。 什么是事件循环（Event Loop，注意空格） JavaScript 是单线程的，有了 event loop 的加持，Node.js 才可以非阻</description>
    </item>
    
    <item>
      <title>我不是很懂 Node.js 社区的 DRY 文化</title>
      <link>http://fangyinghang.com/i-dont-get-node-style/</link>
      <pubDate>Fri, 09 Nov 2018 02:18:28 +0800</pubDate>
      
      <guid>http://fangyinghang.com/i-dont-get-node-style/</guid>
      <description>我一直以为 npm 里下载量较大的 package 是 React 这样不错的包。 今天我才知道我错了。 目前 React 每周下载量是 240 万次。 然而下面我要说的几个包的下载量全都大于 React</description>
    </item>
    
    <item>
      <title>jQuery 都过时了，那我还学它干嘛？</title>
      <link>http://fangyinghang.com/why-still-jquery/</link>
      <pubDate>Mon, 15 Oct 2018 16:22:04 +0800</pubDate>
      
      <guid>http://fangyinghang.com/why-still-jquery/</guid>
      <description>今天饥人谷的新生问我
 请问现在我还需要学习 jQuery 吗？听你在知乎说 jQuery 已经过时了，是不是就不用学了？
 短答案 jQuery 还是可以学一学的，学了之后对写代码和封装库很有帮助。
现在的「新人」依然可以学习 jQuery 的思想，因为以「新人」的水平，直接理解 Vue / React 的思想难度较大，jQuery 是一个很不错的中间过渡，因为 jQuery 也蕴含了非常多的编程套路。
但是如果你不想学，就不学吧。直接去学 Vue / React 会难一点，但也能学会。
长答案： jQuery 当然过时了。
距离我上次在项目中使用 jQuery，可能已经快两年时间了（除去上课时演示功能时用 jQuery）。回想我学习 jQuery 的过程，还挺神奇的。
当年我在大学的技术小组里做 C# 网站开发，需要用到 jQuery 特效，组里的一名小伙伴会用一点 jQuery，很快就用 .animate 做出了让我啧啧称奇的特效。我觉得 jQuery 好神奇啊，虽然我当时连 JS 都不会。
于是我立马买了一本《锋利的 jQuery》，硬看。
什么叫「硬看」呢？因为我不会 JS，而且我并没有照着书上敲代码，仅仅使用眼睛「看 jQuery 代码」。神奇的是——我居然很快看懂了几乎整本书。以至于那位会用 jQuery 的小伙伴遇到 bug 问我时我能直接给出解答，看起来他并没有看《锋利的 jQuery》这本书（笑）。
到了 2018 年，几乎已经没有新项目会使用 jQuery 来开发了；即使有，也是一件不值得拿出来炫耀的事情。那为什么我还是建议学习 jQuery 呢？
原因如下。
jQuery 教你如何设计 API 上文说到我一个不会 JS 的人居然能看懂 jQuery 的书，其实这不是因为我厉害，而是因为 jQuery 的 API 设计得太人性化了！</description>
    </item>
    
    <item>
      <title>为什么不推荐去外包公司</title>
      <link>http://fangyinghang.com/dont-join-outsourcing-company/</link>
      <pubDate>Tue, 28 Aug 2018 02:20:36 +0800</pubDate>
      
      <guid>http://fangyinghang.com/dont-join-outsourcing-company/</guid>
      <description>为什么大部分程序员都不去「外包」公司？ 短答案：99% 的外包公司都是血汗工厂，压榨劳力，真真儿地是「用程序员的生命换钱」。 目前我只知道一家外包</description>
    </item>
    
    <item>
      <title>我写了一个基于 Vue 的 UI 框架——轱辘 UI</title>
      <link>http://fangyinghang.com/gulu-ui/</link>
      <pubDate>Fri, 03 Aug 2018 16:32:18 +0800</pubDate>
      
      <guid>http://fangyinghang.com/gulu-ui/</guid>
      <description>官方文档 | 源码
轱辘 UI 是一个不太一样的 UI 框架。
本 UI 框架是一个「面向源码阅读者」的框架。如果对你有帮助，请不要吝惜你的 star。
也就是说，我制作这个框架的目的就是让前端新人学习轮子的制作思路。所有代码都追求可读性。
 你可以通过查看逐个 commit 来学习本框架的制作思路 也可以通过我录制的视频来学习 （抱歉，由于制作非常耗时，所以视频是收费的。不过项目搭建过程的录屏是免费的，这几节视频能帮你快速从零开始本项目。）  如果你想从第一个commit 开始看，请点击这里。
如果你对代码有疑问，欢迎提issue，我会回答你的疑问。也可以在本文末尾加群咨询。
本 UI 框架是基于 Vue 2 实现的。
注意：本 UI 框架的代码尚未完全完工（目前代码大概完成 50%），请不要在生产环境中使用本 UI 框架。
你能学到什么  单元测试、覆盖率、持续集成等工程概念 重构、TDD/BDD、设计模式、单向数据流等技术概念 Vue 的几乎所有功能，并且是深入理解这些功能，而不是肤浅理解  有哪些轮子  简单轮子：按钮、输入框、网格、布局、Toast、Tabs、Popover、手风琴（代码已完成） 进阶轮子：级联选择、无缝轮播、响应式导航条、分页、表单验证、Table、图片上传、Sticky、Tree、Suggestion、Datepicker（代码未完成） 其他：路由、状态管理（代码未完成）  注意：这只是目前的计划，具体要完成的轮子可能与上面有出入。
项目特点  使用 Travis CI 进行持续集成 有丰富的单元测试，项目完成时，期望测试覆盖率超过 90% 自说明的代码，即使没有注释，你也能看懂 初期我使用 parcel 构建方便新人上手，后期改为 Vue Cli 3 以实现更多功能  背景 我几年前曾经发表过《笨办法学前端》一文， 当时我觉得开源社区里虽然有很多不错的库，但是这些库都是以实用为主，其源码并不适合新人阅读。</description>
    </item>
    
    <item>
      <title>84岁的老程序员</title>
      <link>http://fangyinghang.com/84-years-old-programmer/</link>
      <pubDate>Sun, 08 Apr 2018 23:00:23 +0800</pubDate>
      
      <guid>http://fangyinghang.com/84-years-old-programmer/</guid>
      <description>Quora 上有人问「年纪大的程序员去哪了」 2017年，84 岁的 Gerald Weinberg 回答到： 根据我的判断，我应该是能回答这个问题的年纪最大的人了。我开始写代码的时候，</description>
    </item>
    
    <item>
      <title>Rx.js 思想入门</title>
      <link>http://fangyinghang.com/what-is-rxjs/</link>
      <pubDate>Tue, 13 Mar 2018 02:24:08 +0800</pubDate>
      
      <guid>http://fangyinghang.com/what-is-rxjs/</guid>
      <description>原版视频：Async JavaScript at Netflix by Jafar Husain 原视频语速极快，我反复听了好几遍。本节课就是我对该演讲的翻译和理解。 我觉得这个视频对 Rx.js 新手实在是太友好了，基</description>
    </item>
    
    <item>
      <title>互联网公司招聘启事的正确阅读方式</title>
      <link>http://fangyinghang.com/how-do-i-read-job-description/</link>
      <pubDate>Sun, 25 Feb 2018 02:17:24 +0800</pubDate>
      
      <guid>http://fangyinghang.com/how-do-i-read-job-description/</guid>
      <description>最近我的前端直播班的学生快要开始投简历了，所以我要提前做一些准备工作，正好看到一篇《互联网公司招聘启事的正确阅读方式》很有意思，就搬运过来并</description>
    </item>
    
    <item>
      <title>prototype 和 __proto__ 的区别</title>
      <link>http://fangyinghang.com/prototype-vs-__proto__/</link>
      <pubDate>Fri, 09 Feb 2018 02:21:39 +0800</pubDate>
      
      <guid>http://fangyinghang.com/prototype-vs-__proto__/</guid>
      <description>你的 JS 代码还没运行的时候，JS 环境里已经有一个 window 对象了 window 对象有一个 Object 属性，window.Object 是一个函数对象 window.Object 这个函数对象有一个重要属</description>
    </item>
    
    <item>
      <title>我用了两个月的时间才理解 let</title>
      <link>http://fangyinghang.com/let-in-js/</link>
      <pubDate>Thu, 27 Jul 2017 13:39:30 +0800</pubDate>
      
      <guid>http://fangyinghang.com/let-in-js/</guid>
      <description>当然不是说用完整的两个月时间来理解 let，而是零零碎碎地理解，同时我还要想着怎么写出一篇文章把这个事情说清楚。
在 let 刚出来的时候，我就「以为」我理解了 let。然鹅在过去的两个月里，我对 let 的理解发生了一波三折的变化。
我写这篇文章，是希望我的学习过程，能对你自学有帮助。
初识 let 跟很多人一样，我第一次了解 let 的特性是从 MDN 的文档：
我得到的信息有这么几条：
 let 声明的变量的作用域是块级的； let 不能重复声明已存在的变量； let 有暂时死区，不会被提升。  大部分人应该都是这么认为的，我也是这么理解的。
这个理解「没有问题」，但是不够「全面和深刻」。
第一次质疑 我第一次质疑我的理解是在遇到 for 循环的时候，代码如下。
// 代码段1 var liList = document.querySelectorAll(&#39;li&#39;) // 共5个li for( var i=0; i&amp;lt;liList.length; i++){ liList[i].onclick = function(){ console.log(i) } }  大家都知道依次点击 li 会打印出 5 个 5。如果把 var i 改成 let i，就会分别打印出 0、1、2、3、4：
// 代码段2 var liList = document.querySelectorAll(&#39;li&#39;) // 共5个li for( let i=0; i&amp;lt;liList.</description>
    </item>
    
    <item>
      <title>npx 是干什么的</title>
      <link>http://fangyinghang.com/what-is-npx/</link>
      <pubDate>Wed, 12 Jul 2017 02:20:53 +0800</pubDate>
      
      <guid>http://fangyinghang.com/what-is-npx/</guid>
      <description>最近我在更新 npm 5.2.0 的时候发现会买一送一，自动安装了 npx。 一个月后 npx 就是前端必会的知识，相信我 ; ) （不要问我是不是抄袭，看看文章发表时间你就知</description>
    </item>
    
    <item>
      <title>深入理解 CSS：字体度量、line-height 和 vertical-align</title>
      <link>http://fangyinghang.com/everything-about-font-size/</link>
      <pubDate>Thu, 16 Mar 2017 01:51:37 +0800</pubDate>
      
      <guid>http://fangyinghang.com/everything-about-font-size/</guid>
      <description>这是一篇译文，对 inline 和 inline-block 的元素剖析非常给力。 原文：Deep dive CSS: font metrics, line-height and vertical-align - Vincent De Oliveira line-height 和 vertical-align 都是简单的 CSS 属性，以致于大多数人自以为知道这两个属性的工</description>
    </item>
    
    <item>
      <title>npm 是干什么的</title>
      <link>http://fangyinghang.com/what-is-npm/</link>
      <pubDate>Wed, 14 Dec 2016 02:16:39 +0800</pubDate>
      
      <guid>http://fangyinghang.com/what-is-npm/</guid>
      <description>网上的 npm 教程主要都在讲怎么安装、配置和使用 npm，却不告诉新人「为什么要使用 npm」。今天我就来讲讲这个话题。 本文目标读者是「不太了解 npm 的新</description>
    </item>
    
    <item>
      <title>JS 的 new 到底是干什么的？</title>
      <link>http://fangyinghang.com/new-in-js/</link>
      <pubDate>Mon, 12 Dec 2016 01:45:22 +0800</pubDate>
      
      <guid>http://fangyinghang.com/new-in-js/</guid>
      <description>大部分讲 new 的文章会从面向对象的思路讲起，但是我始终认为，在解释一个事物的时候，不应该引入另一个更复杂的事物。 今天我从「省代码」的角度来讲 ne</description>
    </item>
    
    <item>
      <title>从培训班出来之后找工作的经历，教会了我这五件事</title>
      <link>http://fangyinghang.com/five-key-learnings-from-the-post-bootcamp-job-search/</link>
      <pubDate>Sat, 03 Dec 2016 01:25:35 +0800</pubDate>
      
      <guid>http://fangyinghang.com/five-key-learnings-from-the-post-bootcamp-job-search/</guid>
      <description>这是 Medium 上的一篇文章（已有 5900 个赞），讲的是国外一个培训出来的程序员，用三个月时间，找到了一份年薪 12 万美元的工作，并从中得到的五个忠告的故事。 我</description>
    </item>
    
    <item>
      <title>this 的值到底是什么？一次说清楚</title>
      <link>http://fangyinghang.com/this-in-js/</link>
      <pubDate>Sun, 20 Nov 2016 13:39:30 +0800</pubDate>
      
      <guid>http://fangyinghang.com/this-in-js/</guid>
      <description>你可能遇到过这样的 JS 面试题：
var obj = { foo: function(){ console.log(this) } } var bar = obj.foo obj.foo() // 打印出的 this 是 obj bar() // 打印出的 this 是 window  请解释最后两行函数的值为什么不一样。
初学者关于 this 的理解一直很模糊。今天这篇文章就要一次讲清楚了。
而且这个解释，你在别的地方看不到。看懂这篇文章，所有关于 this 的面试题，都是小菜。
函数调用 首先需要从函数的调用开始讲起。
JS（ES5）里面有三种函数调用形式：
func(p1, p2) obj.child.method(p1, p2) func.call(context, p1, p2) // 先不讲 apply  一般，初学者都知道前两种形式，而且认为前两种形式「优于」第三种形式。
从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：
func.call(context, p1, p2)  其他两种都是语法糖，可以等价地变为 call 形式：
func(p1, p2) 等价于 func.call(undefined, p1, p2) obj.child.method(p1, p2) 等价于 obj.child.method.call(obj.child, p1, p2)  请记下来。（我们称此代码为「转换代码」，方便下文引用）</description>
    </item>
    
    <item>
      <title>JS 原型链</title>
      <link>http://fangyinghang.com/prototype-in-js/</link>
      <pubDate>Thu, 20 Oct 2016 02:21:19 +0800</pubDate>
      
      <guid>http://fangyinghang.com/prototype-in-js/</guid>
      <description>我们知道 JS 有对象，比如 var obj = { name: &#39;obj&#39; } 我们可以对 obj 进行一些操作，包括 「读」属性 「新增」属性 「更新」属性 「删除」属性 下面我们主要来看一下「读」和</description>
    </item>
    
    <item>
      <title>JS 中的闭包是什么？</title>
      <link>http://fangyinghang.com/closures-in-js/</link>
      <pubDate>Sun, 18 Sep 2016 01:36:43 +0800</pubDate>
      
      <guid>http://fangyinghang.com/closures-in-js/</guid>
      <description>大名鼎鼎的闭包！这一题终于来了，面试必问： 请用自己的话简述 什么是「闭包」。 「闭包」的作用是什么。 首先来简述什么是闭包 假设上面三行代码在一个立</description>
    </item>
    
    <item>
      <title>JS 立即执行函数</title>
      <link>http://fangyinghang.com/iife-in-js/</link>
      <pubDate>Fri, 16 Sep 2016 02:22:21 +0800</pubDate>
      
      <guid>http://fangyinghang.com/iife-in-js/</guid>
      <description>这是 JS 中的一个常见概念，面试时经常会被问到， 请「用自己的语言」简述 立即执行函数是什么 立即执行函数有什么用途 回答： 1. 立即执行函数是什么 立即执行</description>
    </item>
    
  </channel>
</rss>